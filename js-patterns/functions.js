/**
 * Функции
 *
 */

/*
 Функции – это объекты, которые:
 - Образуют собственные области видимости.
 - Могут создаваться динамически в процессе выполнения программы.
 - Могут присваиваться переменным, ссылки на них могут копировать-
 ся в  другие переменные, могут быть расширены дополнительными
 свойствами и, за исключением некоторых особых случаев, могут
 быть удалены.
 - Могут передаваться как аргументы другим функциям и могут воз-
 вращаться другими функциями.
 - Могут иметь собственные свойства и методы.
 */

/* ==================== Виды функций ================================================================================ */

// Именованная функция-выражение
var add = function add(a, b) {
    return a + b;
};
console.log(add.name); // add
var res = add(1, 2);
console.log(res);

// Неименованная функция-выражение, или анонимная функция, или просто функция-выражение
// Единственное отличие от именнованой функции-выражению состоит в том,
// что свойство name объекта функции будет содержать пустую строку
var add = function (a, b) {
    return a + b;
};
console.log(add.name); // пустая строка

// Использование
var res = add(1,2);// 3

// функции-объявления
function foo() {
    // тело функции
}

// Различие функций-выражений и функций-объявлений в том, что функции-объявления появляться только в «программном коде»,
// то есть внутри других функций или в глобальной области видимости.
// Определения этих функций не могут присваиваться переменным или свойствам или передаваться другим функциям в виде
// параметров
// Еще эти функции различаются в поведении, которое называется подъемом.
// Объявления всех функций, независимо от того, в каком месте области видимости они находятся, на этапе интерпретации
// как бы «поднимаются» в начало своей области видимости.
// Но «фишка» в том, что для функций-объявлений вместе с именем функции «поднимается» и ее определение,
// а для функций-выражений - только имя
function hoistMe() {
    // Отдельная облать видимости
    // В начало области видимости поднялось определение функции-объявления foo и имя функции-выражения bar
    // неявно
    // var bar;

    console.log(typeof foo); // 'function'
    console.log(typeof bar); // 'undefined'
    foo(); // 'local foo' - видим функцию
    //bar(); // TypeError: bar is not a function - не видим функцию

    // функция-объявление: имя 'foo' и его определение «поднимаются» вместе
    function foo() {
        console.log('local foo');
    }
    // функция-выражение: «поднимается»” только имя 'bar', без реализации
    var bar = function () {
        console.log('local bar');
    };
}
hoistMe();

/* ==================== Функции обратного вызова ==================================================================== */

function writeCode(callback) {

    // проверить, является ли объект callback функцией
    if (typeof callback !== 'function') {
        callback = false;
    }

    if (callback) {
        callback();
    }
}

function introduceBugs() {

}

writeCode(introduceBugs);

/* ==================== Немедленно вызываемые функции =============================================================== */

// Шаблон состоит из следующих частей:
// - Определение функции-выражения. (Этот прием не действует с функциями-объявлениями.)
// - Добавление круглых скобок в конце, которые заставляют интерпретатор выполнить функцию немедленно.
// - Добавление круглых скобок, окружающих всю эту конструкцию(они необходимы, только если функция не присваивается какой-нибудь переменной).

// Особенности немедленно вызываемых функций:
// - помогают выполнять необходимые операции, не оставляя за собой глобальных переменных.
// - дают возможность выделить отдельные особенности в самодостаточные модули


(function () {
    console.log('watch out!');
}());
// Или
(function () {
    console.log('watch out2!');
})();

// Немедленно вызываемым функциям можно передавать дополнительные аргументы:
(function (who, when) {
    console.log('I met ' + who + ' on ' + when);
}('Joe Black', new Date()));

// Обычно немедленно вызываемым функциям в качестве аргумента передается глобальный объект,
// чтобы к нему можно было обращаться без использования свойства window;
// это позволяет использовать программный код в средах, отличных от броузеров:
(function (global) {
    console.log(global); // window в браузере
}(this));

// Как и любая другая функция, немедленно вызываемая функция способна возвращать некоторые значения,
// которые можно присваивать переменным:
var result = (function () {
    return 2 + 2;
}());

// Круглые скобки, окружающие функцию, можно опустить, потому что они не требуются, когда значение,
// возвращаемое немедленно вызываемой функцией, присваивается переменной.
var result = function () {
    return 2 + 2;
}();


/* ==================== Кэширование результатов функции - мемоизация (memorization) ================================= */

// Функции – это объекты, поэтому они могут иметь свойства. При создании имеют некоторые предопределенные свойства и методы.
function func(a, b, c) {}
console.log(func.length); // 3
// В любой момент времени вы можете добавлять к функциям свои свойства. Эти нестандартные свойства могут использоваться,
// например, для кэширования результатов

var myFunc = function () {
    var cacheKey = JSON.stringify(Array.prototype.slice.call(arguments)),
        result;
    if (!myFunc.cache[cacheKey]) {
        result = {};
        // ... продолжительные операции ...
        myFunc.cache[cacheKey] = result;
    }
    return myFunc.cache[cacheKey];
};
// создание хранилища результатов
myFunc.cache = {};

// Название функции myFunc внутри функции можно заменить на arguments.callee (в строгом режиме ECMAScript 5
// свойство arguments.callee не поддерживается)
var myFunc = function () {
    var f = arguments.callee;
        cacheKey = JSON.stringify(Array.prototype.slice.call(arguments)),
        result;
    if (!f.cache[cacheKey]) {
        result = {};

        // ... продолжительные операции ...

        f.cache[cacheKey] = result;
    }
    return f.cache[cacheKey];
};
myFunc.cache = {};

/* ==================== Вызов функции и ее применение =============================================================== */

// Вызов функции, как оказывается, – это не более чем синтаксический сахар(дополнения синтаксиса, которые не добавляют
// новых возможностей), эквивалентный применению функций.

// Определение функции
var sayHi = function (who) {
    return 'Hello' + (who ? ', ' + who : '') + '!';
};

// Вызов функции
sayHi();
sayHi('world');

// Применение функции
// Метод apply() принимает два параметра: в первом передается объект, который будет передан функции через ссылку this,
// а во втором – массив аргументов, который затем будет преобразован в объект arguments, похожий на массив,
// доступный внутри функции. Если в первом параметре передать значение null, то ссылка this будет указывать на
// глобальный объект, что и происходит, когда функция вызывается не как метод определенного объекта.

sayHi.apply(null, ['hello']); // 'Hello, hello!'


// Когда функция вызывается как метод объекта, методу apply() передается ссылка на этот объект:
var alien = {
    sayHi: function (who) {
        return 'Hello' + (who ? ', ' + who : '') + '!';
    }
};
// Вызов
alien.sayHi('world');
// Применение
alien.sayHi.apply(alien, ['humans']);

